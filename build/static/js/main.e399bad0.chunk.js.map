{"version":3,"sources":["components/ContainerButtons.js","components/ListItem.js","components/ContainerList.js","App.js","serviceWorker.js","index.js"],"names":["ContainerButtons","e","preventDefault","this","listButtons","childNodes","forEach","item","hasAttribute","classList","remove","target","add","props","option","innerText","toLowerCase","_this","react_default","a","createElement","ref","className","onClick","onClickButton","Component","moment","locale","ListItem","data","src","thumbnail","includes","alt","href","url","title","concat","unix","created_utc","fromNow","author","domain","ContainerList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasdata","prevProps","setState","children","length","map","index","ListItem_ListItem","key","App","category","fetch","request","json","response","console","log","_this2","ContainerButtons_ContainerButtons","ContainerList_ContainerList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e399bad0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ContainerButtons extends Component {\r\n\r\n\tonClickButton(e) {\r\n\t\te.preventDefault();\r\n\t\tthis.listButtons.childNodes.forEach((item) => {\r\n\t\t\tif (item.hasAttribute('class')) {\r\n\t\t\t\titem.classList.remove('checked')\r\n\t\t\t} \r\n\t\t})\r\n\t\te.target.classList.add('checked');\r\n\t\tthis.props.option(e.target.innerText.toLowerCase());\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div ref={listButtons => this.listButtons = listButtons} className=\"container-buttons\">\r\n\t\t\t\t<button onClick={(e) => this.onClickButton(e)}>hot</button>\r\n\t\t\t\t<button onClick={(e) => this.onClickButton(e)}>new</button>\r\n\t\t\t\t<button onClick={(e) => this.onClickButton(e)}>rising</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport 'moment/locale/pt-br';\r\nmoment.locale('pt-br');\r\n\r\nexport default class ListItem extends Component {\r\n  render() {\r\n    let { data } = this.props;\r\n    return (\r\n      <div className=\"list-item\">\r\n        <div className=\"container-image\">\r\n          <img src={data.thumbnail.includes('http') ? data.thumbnail : 'http://placehold.it/64x64'} alt=\"\" />\r\n        </div>\r\n        <div className=\"container-description\">\r\n          <h3 className=\"title\">\r\n            <a href={data.url}>{data.title}</a>\r\n          </h3>\r\n          <p className=\"send\">\r\n              {`enviado ${moment.unix(data.created_utc).fromNow()} `}<b>por </b><span>{data.author}</span>\r\n          </p>\r\n          <p className=\"domain\">\r\n             <a href={data.domain}>{data.domain}</a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ListItem from './ListItem';\r\n\r\nexport default class ContainerList extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasdata: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tif (prevProps.data !== this.props.data) {\r\n\t\t\tthis.setState({\r\n\t\t\t\thasdata: true\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tlet { data } = this.props;\r\n\r\n\t\tif(!this.state.hasdata) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"container-list\">\r\n\t\t\t\t{\r\n\t\t\t\tdata.data.children.length == 0 \r\n\t\t\t\t?\t<p className=\"error\">NÃ£o existem dados aqui!</p> \r\n\t\t\t\t: \tdata.data.children.map((item, index) => <ListItem key={index} data={item.data}/> )\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\nimport './app.css';\nimport ContainerButtons from './components/ContainerButtons';\nimport ContainerList from './components/ContainerList';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null\n    }\n  }\n  async request(category) {\n    let request = await fetch(`https://www.reddit.com/r/reactjs/${category}.json?sort=new`);\n    let response = await request.json();\n    console.log(response)\n    this.setState({\n      data: response\n    })\n\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"container-header\">\n          <h1>REACT<span>JS</span></h1>\n        </header>\n        <ContainerButtons\n          option={(e) => this.request(e)}\n        />\n        <ContainerList\n          data={this.state.data}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}